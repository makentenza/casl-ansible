---
# tasks file for deploy-infra
- name: Gather information of Region {{ aws_region }}
  ec2_vpc_net_facts:
    region: "{{ aws_region }}"
  register: aws_vpcs

- name: Gather information of AZs in {{ aws_region }}
  ec2_vpc_subnet_facts:
    region: "{{ aws_region }}"
    filters:
      vpc-id: '{{ aws_vpcs.vpcs.0.id }}'
  register: aws_subnets

- name: Create VPC if required
  ec2_vpc_net:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "{{ env_id }}-vpc"
    cidr_block: 172.31.0.0/16
    region: "{{ aws_region }}"
    state: "present"
    tags:
      env_id: "{{ env_id }}"
  when: aws_create_vpc
  register: new_vpc

- name: Create Subnets for the new VPC (HA Mode)
  ec2_vpc_subnet:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    cidr: 172.31.{{ item.subnet }}.0/24
    region: "{{ aws_region }}"
    vpc_id: "{{ new_vpc.vpc.id }}"
    map_public: yes
    az: "{{ item.az }}"
    state: "present"
    tags:
      env_id: "{{ env_id }}"
  with_items:
    - { subnet: '0', az: "{{ aws_subnets.subnets.0.availability_zone }}" }
    - { subnet: '1', az: "{{ aws_subnets.subnets.1.availability_zone }}" }
    - { subnet: '3', az: "{{ aws_subnets.subnets.2.availability_zone }}" }
  when: aws_create_vpc and ha_mode
  register: new_subnets

- name: Clear gathered facts from all currently targeted hosts
  meta: end_play

- name: Create Subnets for the new VPC (HA Mode)
  ec2_vpc_subnet:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    cidr: 172.31.{{ item }}.0/24
    region: "{{ aws_region }}"
    vpc_id: "{{ new_vpc.vpc.id }}"
    map_public: yes
    az: "{{ aws_region }}a"
    state: "present"
    tags:
      env_id: "{{ env_id }}"
  with_sequence: start=0 end=2 stride=1
  when: aws_create_vpc and ha_mode
  register: new_subnets

- name: Create Subnet for the new VPC (Non HA Mode)
  ec2_vpc_subnet:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    cidr: 172.31.0.0/24
    region: "{{ aws_region }}"
    vpc_id: "{{ new_vpc.vpc.id }}"
    map_public: yes
    az: "{{ aws_region }}a"
    state: "present"
    tags:
      env_id: "{{ env_id }}"
  when: aws_create_vpc and not ha_mode
  register: new_subnets

- name: Create SSH Security Group for the new VPC
  ec2_group:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "labs-ssh"
    description: "Labs SSH"
    vpc_id: "{{ new_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    state: "present"
    tags:
      env_id: "{{ env_id }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
  when: aws_create_vpc
  register: ssh_sg

- name: Create OCP Master Security Group for the new VPC
  ec2_group:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "labs-ocp-master"
    description: "Labs OCP Master"
    vpc_id: "{{ new_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    state: "present"
    tags:
      env_id: "{{ env_id }}"
    rules:
      - proto: udp
        from_port: 8053
        to_port: 8053
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8053
        to_port: 8053
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8443
        to_port: 8443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: udp
        from_port: 53
        to_port: 53
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 53
        to_port: 53
        cidr_ip: 0.0.0.0/0
      - proto: udp
        from_port: 4789
        to_port: 4789
        cidr_ip: 0.0.0.0/0
  when: aws_create_vpc
  register: ocp_master_sg

- name: Create OCP Node Security Group for the new VPC
  ec2_group:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "labs-ocp-node"
    description: "Labs OCP Node"
    vpc_id: "{{ new_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    state: "present"
    tags:
      env_id: "{{ env_id }}"
    rules:
      - proto: udp
        from_port: 4789
        to_port: 4789
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 10250
        to_port: 10250
        cidr_ip: 0.0.0.0/0
  when: aws_create_vpc
  register: ocp_node_sg

- name: Create OCP Infra Security Group for the new VPC
  ec2_group:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "labs-ocp-infra"
    description: "Labs OCP Infra"
    vpc_id: "{{ new_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    state: "present"
    tags:
      env_id: "{{ env_id }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
  when: aws_create_vpc
  register: ocp_infra_sg

- name: Create an Internet Gateway for the new VPC
  ec2_vpc_igw:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ new_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    state: present
    tags:
      env_id: "{{ env_id }}"
  when: aws_create_vpc
  register: new_gw

- name: Create Gateway subnet route table for the new VPC
  ec2_vpc_route_table:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ new_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "{{ env_id }}-route-table-gw"
      env_id: "{{ env_id }}"
    subnets:
      - "{{ new_subnets.subnet.id }}"
    routes:
      - dest: "0.0.0.0/0"
        gateway_id: "{{ new_gw.gateway_id }}"

# Create local facts with new subnet id
- name: Register new created objects as facts
  set_fact:
    aws_subnet: "{{ new_subnets.subnet.id }}"

- name: Create Master and etcd instances
  ec2:
    image: "{{ aws_image_name }}"
    instance_type: m4.xlarge
    group: "{{ aws_master_sgroups }}"
    termination_protection: yes
    key_name: "{{ aws_key_name }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ aws_subnet }}"
    exact_count: 1
    count_tag:
      Name: "{{ env_id }}-ocp-master-{{ item }}"
    instance_tags:
      Name: "{{ env_id }}-ocp-master-{{ item }}"
      user: sre
      role: ocp
      group: masters_aws
      node_labels: '{"region": "default"}'
      ocp_role: "{{ master_tag }} {{ etcd_tag}}"
      env_id: "{{ env_id }}"
  with_sequence:
    count="{{ aws_num_masters }}"
  register: instances_master_etcd

- name: Create Infra instances
  ec2:
    image: "{{ aws_image_name }}"
    instance_type: i3.xlarge
    group: "{{ aws_infra_sgroups }}"
    termination_protection: yes
    key_name: "{{ aws_key_name }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ aws_subnet }}"
    exact_count: 1
    count_tag:
      Name: "{{ env_id }}-ocp-infra-{{ item }}"
    instance_tags:
      Name: "{{ env_id }}-ocp-infra-{{ item }}"
      user: sre
      role: ocp
      group: infra_aws
      node_labels: '{"region": "infra"}'
      ocp_role: "{{ infranode_tag }}"
      env_id: "{{ env_id }}"
  with_sequence:
    count="{{ aws_num_infra }}"
  register: instances_infra

- name: Create Compute instances
  ec2:
    image: "{{ aws_image_name }}"
    instance_type: m4.xlarge
    group: "{{ aws_node_sgroups }}"
    termination_protection: yes
    key_name: "{{ aws_key_name }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ aws_subnet }}"
    exact_count: 1
    count_tag:
      Name: "{{ env_id }}-ocp-node-{{ item }}"
    instance_tags:
      Name: "{{ env_id }}-ocp-node-{{ item }}"
      user: sre
      role: ocp
      group: nodes_aws
      node_labels: '{"region": "primary"}'
      ocp_role: "{{ computenode_tag }}"
      env_id: "{{ env_id }}"
  with_sequence:
    count="{{ aws_num_nodes }}"
  register: instances_compute

- name: Give some time until the instances are running before attaching storage
  pause:
    seconds: 30

- name: Add EBS for docker storage
  ec2_vol:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    delete_on_termination: yes
    device_name: /dev/xvdb
    instance: "{{ item.instance_ids[0] }}"
    volume_size: 40
    volume_type: gp2
    tags:
      user: sre
      role: ocp
      env_id: "{{ env_id }}"
  with_items:
    - "{{ instances_master_etcd.results }}"
    - "{{ instances_infra.results }}"
    - "{{ instances_compute.results }}"

- name: Create elastic IP for Master Node (Non HA Mode)
  ec2_eip:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    in_vpc: yes
    state: present
    release_on_disassociation: yes
    device_id: "{{ instances_master_etcd.results[0].instances[0].id }}"
  when: not ha_mode
  register: master_eip

- name: Create elastic IP for Infra Node (Non HA Mode)
  ec2_eip:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    in_vpc: yes
    state: present
    release_on_disassociation: yes
    device_id: "{{ instances_infra.results[0].instances[0].id }}"
  when: not ha_mode
  register: infra_eip

- name: Ensure Route53 zone is present
  route53_zone:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    zone: "{{ public_dns_domain }}"
    state: present

- name: Update Route53 with OCP master record
  route53:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    zone: "{{ public_dns_domain }}."
    record: "master.{{ env_id }}.{{ public_dns_domain }}."
    type: A
    value: "{{ master_eip.public_ip }}"
    command: create
    overwrite: yes
    ttl: 300
  when: not ha_mode

- name: Update Route53 with OCP infra wildcard record
  route53:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    zone: "{{ public_dns_domain }}."
    record: "*.apps.{{ env_id }}.{{ public_dns_domain }}."
    type: A
    value: "{{ infra_eip.public_ip }}"
    command: create
    overwrite: yes
    ttl: 300
  when: not ha_mode
