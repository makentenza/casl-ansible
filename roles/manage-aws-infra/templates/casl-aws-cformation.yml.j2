AWSTemplateFormatVersion: '2010-09-09'
Description: "Red Hat's Container & PaaS CoP - CASL repository AWS CloudFormation template for OCP - Environment: {{ env_id }}"
Parameters:
  VPCCIDR:
    Default: "10.0.0.0/16"
    Description: "CIDR block for the VPC"
    Type: "String"
  PrivateSubnet1CIDR:
    Default: "10.0.1.0/16"
    Description: "CIDR block for the Private Subnet on AZ1"
    Type: "String"
  PrivateSubnet2CIDR:
    Default: "10.0.2.0/16"
    Description: "CIDR block for the Private Subnet on AZ2"
    Type: "String"
  PrivateSubnet3CIDR:
    Default: "10.0.3.0/16"
    Description: "CIDR block for the Private Subnet on AZ3"
    Type: "String"
  Image:
    Description: "EC2 ami to be used"
    Type: "String"
  KeyPairName:
    Description: "SSH Key to asign to the EC2 instances"
    Type: "String"
  MasterInstanceType:
    Default: "m4.xlarge"
    Description: "The instance type to be used"
    Type: "String"
  EtcdInstanceType:
    Default: "m4.xlarge"
    Description: "The instance type to be used"
    Type: "String"
  NodesInstanceType:
    Default: "m4.xlarge"
    Description: "The instance type to be used"
    Type: "String"
  InfraInstanceType:
    Default: "i3.xlarge"
    Description: "The instance type to be used"
    Type: "String"
  CNSInstanceType:
    Default: "i3.xlarge"
    Description: "The instance type to be used"
    Type: "String"
  MasterApiPort:
    Default: "443"
    Description: "Exposed OpenShift API port number"
    Type: "String"
  MasterHealthTarget:
    Description: "Master API exposed Port for the LB HealthCheck"
    Default: "TCP:8443"
    Type: "String"
  #PublicSubnet1CIDR:
  #PublicSubnet2CIDR:
  #PublicSubnet3CIDR:
  #RemoteAccessCIDR:
  #ContainerAccessCIDR:
  #KeyPairName:
  #NumberOfMaster:
  #NumberOfEtcd:
  #NumberOfNodes:
  #NumberOfInfra:
  #NumberOfCNS:


Resources:
{% if aws_create_vpc %}
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
      - Key: 'Name'
        Value: '{{ env_id }}'
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: 'Name'
        Value: '{{ env_id }}'
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: True
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
      - Key: 'Name'
        Value: '{{ env_id }}'
      - Key: 'kubernetes.io/cluster/cluster-{{ env_id }}'
        Value: '{{ env_id }}'
  SubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: True
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
      - Key: 'Name'
        Value: '{{ env_id }}'
      - Key: 'kubernetes.io/cluster/cluster-{{ env_id }}'
        Value: '{{ env_id }}'
  SubnetAZ3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: True
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      Tags:
      - Key: 'Name'
        Value: '{{ env_id }}'
      - Key: 'kubernetes.io/cluster/cluster-{{ env_id }}'
        Value: '{{ env_id }}'
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: 'Name'
        Value: '{{ env_id }}'
  RouteInternetGW:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  SubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetAZ1
      RouteTableId: !Ref RouteTable
  SubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetAZ2
      RouteTableId: !Ref RouteTable
  SubnetAZ3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetAZ3
      RouteTableId: !Ref RouteTable
{% endif %}
  apielbsg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: apielbsg
      GroupDescription: Master API LB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref MasterApiPort
        ToPort: !Ref MasterApiPort
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: 'Name'
        Value: '{{ env_id }}'
  infraelbsg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: infraelbsg
      GroupDescription: Routers LB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: 'Name'
        Value: '{{ env_id }}'
  mastersg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: mastersg
      GroupDescription: Master Nodes Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: udp
        FromPort: '8053'
        ToPort: '8053'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '8053'
        ToPort: '8053'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: !Ref MasterApiPort
        ToPort: !Ref MasterApiPort
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '53'
        ToPort: '53'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '53'
        ToPort: '53'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '4789'
        ToPort: '4789'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: 'Name'
        Value: '{{ env_id }}'
  infrasg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: infrasg
      GroupDescription: Infrastructure Nodes Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: 'Name'
        Value: '{{ env_id }}'
  nodesg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: nodesg
      GroupDescription: Compute Nodes Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '10250'
        ToPort: '10250'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '4789'
        ToPort: '4789'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: 'Name'
        Value: '{{ env_id }}'
  sshsg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: sshsg
      GroupDescription: SSH Server Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: 'Name'
        Value: '{{ env_id }}'
  etcdsg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: etcdsg
      GroupDescription: ETCD Nodes Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2379'
        ToPort: '2379'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '2380'
        ToPort: '2380'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: 'Name'
        Value: '{{ env_id }}'
  cnssg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: cnssg
      GroupDescription: Gluster Nodes Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '24007'
        ToPort: '24007'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '24008'
        ToPort: '24008'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '2222'
        ToPort: '2222'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '49152'
        ToPort: '49664'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '24010'
        ToPort: '24010'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '3260'
        ToPort: '3260'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '111'
        ToPort: '111'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: 'Name'
        Value: '{{ env_id }}'
{% for idx in range(0, aws_num_masters) %}
  Master{{ '%02d' % idx }}:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref Image
      KeyName: !Ref KeyPairName
      InstanceType: !Ref MasterInstanceType
      SubnetId : !Ref SubnetAZ{{ loop.index }}
      SecurityGroupIds:
        {% if aws_num_etcd == 0 -%}
        - !GetAtt etcdsg.GroupId
        {% endif -%}
        - !GetAtt nodesg.GroupId
        - !GetAtt mastersg.GroupId
        - !GetAtt sshsg.GroupId
      Tags:
        {% if aws_num_etcd == 0 -%}
        - Key: 'groupetcd'
          Value: '{{ group_etcd_nodes_tag }}'
        {% endif -%}
        - Key: 'Name'
          Value: 'master-{{ idx }}.{{ env_id }}.{{ dns_domain }}'
        - Key: 'ocp_role'
          Value: 'master'
        - Key: 'env_id'
          Value: '{{ env_id }}'
        - Key: 'group'
          Value: '{{ group_masters_tag }}'
        - Key: 'node_labels'
          Value: '{{ labels_masters_tag }}'
        - Key: 'kubernetes.io/cluster/cluster-{{ env_id }}'
          Value: '{{ env_id }}'
      AvailabilityZone:
        Fn::Select:
          - {{ loop.index0 }}
          - Fn::GetAZs: ""
      BlockDeviceMappings:
        {% if master_root_volume is defined -%}
        - DeviceName: "{{ master_root_volume }}"
        {% else -%}
        - DeviceName: "{{ default_root_volume }}"
          {% endif -%}
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            {% if master_root_volume_size is defined -%}
            VolumeSize: "{{ master_root_volume_size }}"
            {% else -%}
            VolumeSize: "{{ default_root_volume_size }}"
        {% endif -%}
        {% if docker_storage_block_device is defined -%}
        - DeviceName: "{{ docker_storage_block_device }}"
        {% else -%}
        - DeviceName: "{{ default_docker_volume }}"
          {% endif -%}
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            {% if docker_volume_size is defined -%}
            VolumeSize: "{{ docker_volume_size }}"
            {% else -%}
            VolumeSize: "{{ default_docker_volume_size }}"
{% endif -%}
{% endfor %}
{% for idx in range(0, aws_num_etcd) %}
  ETCD{{ '%02d' % idx }}:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref Image
      KeyName: !Ref KeyPairName
      InstanceType: !Ref EtcdInstanceType
      SubnetId : !Ref SubnetAZ{{ loop.index }}
      SecurityGroupIds:
        - !GetAtt etcdsg.GroupId
        - !GetAtt nodesg.GroupId
        - !GetAtt sshsg.GroupId
      Tags:
        - Key: 'Name'
          Value: 'etcd-{{ idx }}.{{ env_id }}.{{ dns_domain }}'
        - Key: 'ocp_role'
          Value: 'etcd'
        - Key: 'env_id'
          Value: '{{ env_id }}'
        - Key: 'groupetcd'
          Value: '{{ group_etcd_nodes_tag }}'
        - Key: 'node_labels'
          Value: '{{ labels_etcd_nodes_tag }}'
        - Key: 'kubernetes.io/cluster/cluster-{{ env_id }}'
          Value: '{{ env_id }}'
      AvailabilityZone:
        Fn::Select:
          - {{ loop.index0 }}
          - Fn::GetAZs: ""
      BlockDeviceMappings:
        {% if etcd_root_volume is defined -%}
        - DeviceName: "{{ etcd_root_volume }}"
        {% else -%}
        - DeviceName: "{{ default_root_volume }}"
          {% endif -%}
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            {% if etcd_root_volume_size is defined -%}
            VolumeSize: "{{ etcd_root_volume_size }}"
            {% else -%}
            VolumeSize: "{{ default_root_volume_size }}"
        {% endif -%}
        {% if docker_storage_block_device is defined -%}
        - DeviceName: "{{ docker_storage_block_device }}"
        {% else -%}
        - DeviceName: "{{ default_docker_volume }}"
          {% endif -%}
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            {% if docker_volume_size is defined -%}
            VolumeSize: "{{ docker_volume_size }}"
            {% else -%}
            VolumeSize: "{{ default_docker_volume_size }}"
{% endif -%}
{% endfor %}
{% for idx in range(0, aws_num_infra_nodes) %}
  Infra{{ '%02d' % idx }}:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref Image
      KeyName: !Ref KeyPairName
      InstanceType: !Ref InfraInstanceType
      SubnetId : !Ref SubnetAZ{{ loop.index }}
      SecurityGroupIds:
        - !GetAtt nodesg.GroupId
        - !GetAtt infrasg.GroupId
        - !GetAtt sshsg.GroupId
      Tags:
        - Key: 'Name'
          Value: 'infra-{{ idx }}.{{ env_id }}.{{ dns_domain }}'
        - Key: 'ocp_role'
          Value: 'infranode'
        - Key: 'env_id'
          Value: '{{ env_id }}'
        - Key: 'group'
          Value: '{{ group_infra_nodes_tag }}'
        - Key: 'node_labels'
          Value: '{{ labels_infra_nodes_tag }}'
        - Key: 'kubernetes.io/cluster/cluster-{{ env_id }}'
          Value: '{{ env_id }}'
      AvailabilityZone:
        Fn::Select:
          - {{ loop.index0 }}
          - Fn::GetAZs: ""
      BlockDeviceMappings:
        {% if infra_node_root_volume is defined -%}
        - DeviceName: "{{ infra_node_root_volume }}"
        {% else -%}
        - DeviceName: "{{ default_root_volume }}"
          {% endif -%}
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            {% if infra_node_root_volume_size is defined -%}
            VolumeSize: "{{ infra_node_root_volume_size }}"
            {% else -%}
            VolumeSize: "{{ default_root_volume_size }}"
        {% endif -%}
        {% if docker_storage_block_device is defined -%}
        - DeviceName: "{{ docker_storage_block_device }}"
        {% else -%}
        - DeviceName: "{{ default_docker_volume }}"
          {% endif -%}
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            {% if docker_volume_size is defined -%}
            VolumeSize: "{{ docker_volume_size }}"
            {% else -%}
            VolumeSize: "{{ default_docker_volume_size }}"
{% endif -%}
{% endfor %}
{% for idx in range(0, aws_num_app_nodes) %}
  Node{{ '%02d' % idx }}:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref Image
      KeyName: !Ref KeyPairName
      InstanceType: !Ref NodesInstanceType
      SubnetId : !Ref SubnetAZ{{ loop.index }}
      SecurityGroupIds:
        - !GetAtt nodesg.GroupId
        - !GetAtt sshsg.GroupId
      Tags:
        - Key: 'Name'
          Value: 'node-{{ idx }}.{{ env_id }}.{{ dns_domain }}'
        - Key: 'ocp_role'
          Value: 'computenode'
        - Key: 'env_id'
          Value: '{{ env_id }}'
        - Key: 'group'
          Value: '{{ group_app_nodes_tag }}'
        - Key: 'node_labels'
          Value: '{{ labels_app_nodes_tag }}'
        - Key: 'kubernetes.io/cluster/cluster-{{ env_id }}'
          Value: '{{ env_id }}'
      AvailabilityZone:
        Fn::Select:
          - {{ loop.index0 }}
          - Fn::GetAZs: ""
      BlockDeviceMappings:
        {% if app_node_root_volume is defined -%}
        - DeviceName: "{{ app_node_root_volume }}"
        {% else -%}
        - DeviceName: "{{ default_root_volume }}"
          {% endif -%}
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            {% if app_node_root_volume_size is defined -%}
            VolumeSize: "{{ app_node_root_volume_size }}"
            {% else -%}
            VolumeSize: "{{ default_root_volume_size }}"
        {% endif -%}
        {% if docker_storage_block_device is defined -%}
        - DeviceName: "{{ docker_storage_block_device }}"
        {% else -%}
        - DeviceName: "{{ default_docker_volume }}"
          {% endif -%}
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            {% if docker_volume_size is defined -%}
            VolumeSize: "{{ docker_volume_size }}"
            {% else -%}
            VolumeSize: "{{ default_docker_volume_size }}"
{% endif -%}
{% endfor %}
{% for idx in range(0, aws_num_cns_nodes) %}
  CNS{{ '%02d' % idx }}:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref Image
      KeyName: !Ref KeyPairName
      InstanceType: !Ref CNSInstanceType
      SubnetId : !Ref SubnetAZ{{ loop.index }}
      SecurityGroupIds:
        - !GetAtt nodesg.GroupId
        - !GetAtt sshsg.GroupId
        - !GetAtt cnssg.GroupId
      Tags:
        - Key: 'Name'
          Value: 'cns-{{ idx }}.{{ dns_domain }}.{{ dns_domain }}'
        - Key: 'ocp_role'
          Value: 'cnsnode'
        - Key: 'env_id'
          Value: '{{ env_id }}'
        - Key: 'group'
          Value: '{{ group_cns_nodes_tag }}'
        - Key: 'node_labels'
          Value: '{{ labels_cns_nodes_tag }}'
        - Key: 'kubernetes.io/cluster/cluster-{{ env_id }}'
          Value: '{{ env_id }}'
      AvailabilityZone:
        Fn::Select:
          - {{ loop.index0 }}
          - Fn::GetAZs: ""
      BlockDeviceMappings:
        {% if cns_node_root_volume is defined -%}
        - DeviceName: "{{ cns_node_root_volume }}"
        {% else -%}
        - DeviceName: "{{ default_root_volume }}"
          {% endif -%}
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            {% if cns_node_root_volume_size is defined -%}
            VolumeSize: "{{ cns_node_root_volume_size }}"
            {% else -%}
            VolumeSize: "{{ default_root_volume_size }}"
        {% endif -%}
        {% if docker_storage_block_device is defined -%}
        - DeviceName: "{{ docker_storage_block_device }}"
        {% else -%}
        - DeviceName: "{{ default_docker_volume }}"
          {% endif -%}
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            {% if docker_volume_size is defined -%}
            VolumeSize: "{{ docker_volume_size }}"
            {% else -%}
            VolumeSize: "{{ default_docker_volume_size }}"
        {% endif -%}
        {% if cns_node_volume is defined -%}
        - DeviceName: "{{ cns_node_volume }}"
        {% else -%}
        - DeviceName: "{{ default_cns_volume }}"
          {% endif -%}
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            {% if cns_node_volume_size is defined -%}
            VolumeSize: "{{ cns_node_volume_size }}"
            {% else -%}
            VolumeSize: "{{ default_cns_volume_size }}"
{% endif -%}
{% endfor %}
  MasterExtElb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: 'true'
      ConnectionSettings:
        IdleTimeout: 300
      Tags:
      - Key: Name
        Value: ocp_master_elb
      - Key: env
        Value: '{{ env_id }}'
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '5'
        Target: !Ref MasterHealthTarget
        Timeout: '2'
        UnhealthyThreshold: '2'
      Listeners:
      - InstancePort: !Ref MasterApiPort
        InstanceProtocol: TCP
        LoadBalancerPort: !Ref MasterApiPort
        Protocol: TCP
      SecurityGroups:
      - !Ref apielbsg
      Instances:
      {% for idx in range(0, aws_num_masters) -%}
      - !Ref Master{{ '%02d' % idx }}
      {% endfor -%}
      Subnets:
      - !Ref SubnetAZ1
      - !Ref SubnetAZ2
      - !Ref SubnetAZ3
  InfraElb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: 'true'
      Tags:
      - Key: Name
        Value: ocp_router_elb
      - Key: env
        Value: '{{ env_id }}'
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '5'
        Target: TCP:443
        Timeout: '2'
        UnhealthyThreshold: '2'
      Listeners:
      - InstancePort: '443'
        InstanceProtocol: TCP
        LoadBalancerPort: '443'
        Protocol: TCP
      - InstancePort: '80'
        InstanceProtocol: TCP
        LoadBalancerPort: '80'
        Protocol: TCP
      SecurityGroups:
      - !Ref infraelbsg
      Instances:
      {% for idx in range(0, aws_num_infra_nodes) -%}
      - !Ref Infra{{ '%02d' % idx }}
      {% endfor -%}
      Subnets:
      - !Ref SubnetAZ1
      - !Ref SubnetAZ2
      - !Ref SubnetAZ3
  Route53Records:
    Type: AWS::Route53::RecordSetGroup
    DependsOn:
    - InfraElb
    - MasterExtElb
    {% for idx in range(0, aws_num_infra_nodes) -%}
    - Infra{{ '%02d' % idx }}
    {% endfor -%}
    {% for idx in range(0, aws_num_masters) -%}
    - Master{{ '%02d' % idx }}
    {% endfor -%}
    Properties:
      HostedZoneName: "{{ dns_domain }}."
      RecordSets:
      - Name: "{{ openshift_master_cluster_public_hostname }}."
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt MasterExtElb.CanonicalHostedZoneNameID
          DNSName: !GetAtt MasterExtElb.CanonicalHostedZoneName
      - Name: "{{ openshift_master_cluster_hostname }}."
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt MasterExtElb.CanonicalHostedZoneNameID
          DNSName: !GetAtt MasterExtElb.CanonicalHostedZoneName
      - Name: "*.{{ openshift_master_default_subdomain }}."
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt InfraElb.CanonicalHostedZoneNameID
          DNSName: !GetAtt InfraElb.CanonicalHostedZoneName
Outputs:
  VpcId:
    Value: !Ref VPC
