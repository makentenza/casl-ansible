# Create VPC and all the required objects to provide connectitvity to the OCP instances
---
- name: Create VPC if required
  ec2_vpc_net:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "{{ env_id }}-vpc"
    cidr_block: 172.31.0.0/16
    region: "{{ aws_region }}"
    state: "present"
    tags:
      env_id: "{{ env_id }}"
  register: new_vpc

- name: Create Subnets for the new VPC (HA Mode)
  ec2_vpc_subnet:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    cidr: 172.31.{{ item }}.0/20
    region: "{{ aws_region }}"
    vpc_id: "{{ new_vpc.vpc.id }}"
    map_public: yes
    az: "{{ aws_region }}a"
    state: "present"
    tags:
      env_id: "{{ env_id }}"
  with_sequence: start=0 end=64 stride=16
  when: ha_mode
  register: new_subnets

- name: Create Subnet for the new VPC (Non HA Mode)
  ec2_vpc_subnet:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    cidr: 172.31.0.0/20
    region: "{{ aws_region }}"
    vpc_id: "{{ new_vpc.vpc.id }}"
    map_public: yes
    az: "{{ aws_region }}a"
    state: "present"
    tags:
      env_id: "{{ env_id }}"
  when: not ha_mode
  register: new_subnets

- name: Create SSH Security Group for the new VPC
  ec2_group:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "ocp-ssh"
    description: "OCP SSH"
    vpc_id: "{{ new_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    state: "present"
    tags:
      env_id: "{{ env_id }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
  register: ssh_sg

- name: Create OCP Master Security Group for the new VPC
  ec2_group:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "ocp-master"
    description: "OCP Master"
    vpc_id: "{{ new_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    state: "present"
    tags:
      env_id: "{{ env_id }}"
    rules:
      - proto: udp
        from_port: 8053
        to_port: 8053
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8053
        to_port: 8053
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8443
        to_port: 8443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: udp
        from_port: 53
        to_port: 53
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 53
        to_port: 53
        cidr_ip: 0.0.0.0/0
      - proto: udp
        from_port: 4789
        to_port: 4789
        cidr_ip: 0.0.0.0/0
  register: ocp_master_sg

- name: Create OCP Node Security Group for the new VPC
  ec2_group:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "ocp-node"
    description: "OCP Node"
    vpc_id: "{{ new_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    state: "present"
    tags:
      env_id: "{{ env_id }}"
    rules:
      - proto: udp
        from_port: 4789
        to_port: 4789
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 10250
        to_port: 10250
        cidr_ip: 0.0.0.0/0
  register: ocp_node_sg

- name: Create OCP Infra Security Group for the new VPC
  ec2_group:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "ocp-infra"
    description: "OCP Infra"
    vpc_id: "{{ new_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    state: "present"
    tags:
      env_id: "{{ env_id }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
  register: ocp_infra_sg

- name: Create an Internet Gateway for the new VPC
  ec2_vpc_igw:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ new_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    state: present
    tags:
      env_id: "{{ env_id }}"
  register: new_gw

- name: Create Gateway subnet route table for the new VPC
  ec2_vpc_route_table:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ new_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "{{ env_id }}-route-table-gw"
      env_id: "{{ env_id }}"
    subnets:
      - "{{ new_subnets.subnet.id }}"
    routes:
      - dest: "0.0.0.0/0"
        gateway_id: "{{ new_gw.gateway_id }}"

- name: Register new created objects as facts
  set_fact:
    aws_subnet: "{{ new_subnets.subnet.id }}"
