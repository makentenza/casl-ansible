---
- name: Ensure ec2 instances are in {{ operation }} state
  ec2:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    instance_tags:
      env_id: "{{ env_id }}"
    state: "{{ operation }}"
  when: (operation == "running") or
        (operation == "stopped")

- name: Register instances to be terminated
  ec2_remote_facts:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    filters:
      "tag:env_id": "{{ env_id }}"
  when: operation == "absent"
  register: destroy_instances

- name: Ensure ec2 are stopped and terminate protection is disabled
  ec2:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region:  "{{ aws_region }}"
    termination_protection: no
    state: stopped
    instance_ids: "{{ item.id }}"
    wait: yes
  with_items:
    - "{{ destroy_instances.instances }}"
  when: operation == "absent"

- name: Ensure ec2 are terminated
  ec2:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region:  "{{ aws_region }}"
    state: "{{ operation }}"
    instance_ids: "{{ item.id }}"
    wait: yes
  with_items:
    - "{{ destroy_instances.instances }}"
  when: operation == "absent"

- name: Register VPC to be terminated
  ec2_vpc_net_facts:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    filters:
      "tag:env_id": "{{ env_id }}"
  register: destroy_vpc
  when:
    - operation == "absent"
    - delete_vpc

- name: Register Security Groups to be terminated
  ec2_group_facts:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    filters:
      "tag:env_id": "{{ env_id }}"
  register: destroy_sgroups
  when:
    - operation == "absent"
    - delete_vpc

- name: Ensure VPC has no dependencies
  ec2_vpc:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    vpc_id: "{{ destroy_vpc.vpcs[0].id }}"
    state: "present"
    resource_tags: "{}"
    subnets: []
    internet_gateway: False
    route_tables: []
    wait: yes
  when:
    - operation == "absent"
    - delete_vpc

- name: Ensure Security Groups are removed
  ec2_group:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    state: "{{ operation }}"
    group_id: "{{ item.group_id }}"
  when:
    - operation == "absent"
    - delete_vpc
  with_items:
    - "{{ destroy_sgroups.security_groups }}"

- name: Ensure VPC is removed
  ec2_vpc_net:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "{{ destroy_vpc.vpcs[0].tags.Name }}"
    cidr_block: "{{ destroy_vpc.vpcs[0].cidr_block }}"
    region: "{{ aws_region }}"
    state: "{{ operation }}"
    tags:
      env_id: "{{ env_id }}"
  when:
    - operation == "absent"
    - delete_vpc
